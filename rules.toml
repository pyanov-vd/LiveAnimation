# Руководство по разработке Kotlin Multiplatform (KMP) проектов
# Предназначено для использования ИИ-ассистентом
introduction = "Твоя задача - помогать мне писать чистый, поддерживаемый, эффективный и идиоматичный Kotlin-код, максимально используя возможности KMP."

# Общие правила
[general_rules]
main_language = "Kotlin"
ui_language = "Compose Multiplatform"
rules = [
    "Всегда отвечай на русском языке.",
    "При написании кода следуй официальным соглашениям по стилю кода Kotlin.",
    "Если предлагаешь изменения в коде, предоставь полный код измененного файла.",
    "Предпочитай val вместо var, если переменная не переназначается.",
    "Предпочитай неизменяемые структуры данных `val`, `listOf`, `mapOf`, неизменяемые `data class` и так далее. Особенно для моделей состояния и данных.",
    "Для асинхронных операций повсеместно используй Kotlin Coroutines и Flow. Обеспечивай правильное управление жизненным циклом корутин (например, через `CoroutineScope`).",
    "Для управления состоянием UI и потоками данных активно используй `StateFlow` и `SharedFlow`.",
    "Для UI поощряй паттерны Unidirectional Data Flow, где состояние иммутабельно и изменяется через явные события/действия.",
    "Для каждого элемента данных должен быть один источник правды (Single Source of Truth).",
    "Предпочитай короткие, сфокусированные функции и классы с одной зоной ответственности.",
]

# Структура проекта
[project_structure]
general_package_name = "com.pyanov.liveanimation"
common_code_main_folder = "commonMain"
common_resources_folder = "commonResources"
common_android_code_folder = "androidMain"
common_ios_code_folder = "iosMain"
target_android_application_folder = "androidLiveAnim"
target_ios_application_folder = "iosLiveAnim"

# Правила проекта
[project_rules]
rules = [
    "В качестве аритектуры проекта используй MVI и Clean Architecture. разделяй все на слои (доменный, данных, представления)",
    "Код бизнес логики и основной функционал должен быть написан в `commonMain`",
    "Старайся выносить логику из Composable функций во вспомогательные функции или классы. Создавай небольшие, переиспользуемые Composable-функции.",
    "Используй LATheme для цветов и типографики."
]

# Тестирование
[testing]
rules = [
    "Юнит-тесты в `commonTest`: Большая часть юнит-тестов для бизнес-логики и ViewModel должна находиться в `commonTest`.",
    "Тестирование `actual` реализаций: Платформенные тесты для `actual` реализаций и интеграционные тесты должны находиться в соответствующих `androidUnitTest`, `iosTest` и т.д.",
    "Для мокирования создавай тестовые объекты самостоятельно"
]

# Внешние зависимости
[project_dependencies]
di_framework = "Koin"
databse_framework = "Room"
rules = [
    "Минимизация зависимостей: Избегай добавления ненужных зависимостей.",
    "Управление версиями: Обращай внимание на согласованность версий библиотек, особенно KMP-библиотек и Kotlin Gradle Plugin."
]

# Стиль кода
[code_style]
indentation = "tab"
max_line_length = 120
max_variable_name_length = 30

# Заключение
conclusion = "Эти правила — мое основное руководство для тебя. Если у тебя есть альтернативные предложения, основанные на этих принципах, или если контекст требует другого подхода, пожалуйста, дай мне знать. Я ценю проактивность и обсуждение лучших решений."

# Действие после прочтения этого файла
final = "После прочтения этих правил изучи структуру моего проекта. Если будут несоответствия дай мне знать об этом, чтобы я мог поправить правила. Изучив проект пойти что он делает. Если теб не понятно, то спроси для уточнения."
